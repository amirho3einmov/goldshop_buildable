name: Build APK (Robust AIDL & Buildozer)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
      ANDROID_NDK_ROOT: /usr/local/lib/android/sdk/ndk/25.2.9519653

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Python 3.10 (avoid distutils removal issues)
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system dependencies (includes python3-distutils)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git build-essential zip unzip openjdk-17-jdk autoconf automake libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo6 cmake curl wget python3 python3-pip python3-venv python3-distutils ca-certificates libssl-dev

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create virtual environment and expose to PATH
        run: |
          python -m venv buildozer-venv
          echo "VIRTUAL_ENV=$PWD/buildozer-venv" >> $GITHUB_ENV
          echo "$PWD/buildozer-venv/bin" >> $GITHUB_PATH

      - name: Configure Android SDK env and PATH
        run: |
          echo "/usr/local/lib/android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH
          echo "/usr/local/lib/android/sdk/build-tools/33.0.2" >> $GITHUB_PATH
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV

      - name: Ensure cmdline-tools and sdkmanager available
        run: |
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            sudo mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            if command -v sdkmanager >/dev/null 2>&1; then
              yes | sdkmanager --install "cmdline-tools;latest" || true
            else
              echo "sdkmanager not on PATH; runner may already have SDK installed"
            fi
          else
            echo "cmdline-tools already present"
          fi

      - name: Install required Android packages (with retries)
        run: |
          PKGS=("platforms;android-33" "build-tools;33.0.2" "platform-tools")
          for pkg in "${PKGS[@]}"; do
            echo "Installing $pkg"
            for i in 1 2 3; do
              sdkmanager "$pkg" && break || (echo "retry $i for $pkg" && sleep 3)
            done
          done
          yes | sdkmanager --licenses || true

      - name: Activate venv & install Python packages
        run: |
          source buildozer-venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install setuptools==65.5.0
          python -m pip install --upgrade buildozer Cython==0.29.33 virtualenv wheel
          python -m pip list

      - name: Diagnostics Java ,Android ,Python
        run: |
          source buildozer-venv/bin/activate
          java -version || true
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          which sdkmanager || true
          sdkmanager --list | head -n 40 || true
          python --version
          pip --version

      - name: Replace build-tools aidl with wrapper (backup original)
        run: |
          set -euo pipefail
          BUILD_TOOLS_DIR="$ANDROID_SDK_ROOT/build-tools/33.0.2"
          BUILD_TOOLS_AIDL="$BUILD_TOOLS_DIR/aidl"
          BACKUP="$BUILD_TOOLS_AIDL.orig"

          if [ -f "$BUILD_TOOLS_AIDL" ]; then
            sudo cp "$BUILD_TOOLS_AIDL" "$BACKUP" || true
          fi

          sudo tee "$BUILD_TOOLS_AIDL" > /dev/null <<'EOF'
#!/bin/bash
# Minimal wrapper for aidl: answer --version, otherwise exec original.
ORIG_FILE="$(dirname "$0")/aidl.orig"
if [ "$1" = "--version" ] && [ $# -eq 1 ]; then
  echo "33.0.2"
  exit 0
fi
if [ -x "$ORIG_FILE" ]; then
  exec "$ORIG_FILE" "$@"
else
  exec "$(dirname "$0")/aidl.orig" "$@"
fi
EOF
          sudo chmod +x "$BUILD_TOOLS_AIDL"
          echo "Installed wrapper at $BUILD_TOOLS_AIDL (backup at $BACKUP if existed)"
          aidl --version || true

      - name: Patch Buildozer to skip AIDL version check (idempotent)
        run: |
          source buildozer-venv/bin/activate
          python - <<'PY'
from pathlib import Path
import re
try:
    import buildozer.targets.android as mod
    p = Path(mod.__file__)
    s = p.read_text()
    if 'def check_aidl' in s:
        s2 = re.sub(r"def check_aidl\\(.*?\\):\\n(?:\\s+.*\\n)+?(?=\\ndef |\\Z)",
                    "def check_aidl(self, aidl=None):\\n    # Patched in CI: skip AIDL check\\n    return True\\n\\n",
                    s, flags=re.S)
        if s2 != s:
            p.write_text(s2)
            print('Patched check_aidl in', p)
        else:
            print('No change needed')
    else:
        print('check_aidl not found')
except Exception as e:
    print('Could not patch buildozer:', e)
PY

      - name: Create buildozer.spec if missing
        run: |
          source buildozer-venv/bin/activate
          if [ ! -f buildozer.spec ]; then
            echo "Creating default buildozer.spec file..."
            buildozer init
          else
            echo "buildozer.spec already exists"
          fi

      - name: Configure buildozer.spec for Android (paths & skip check)
        run: |
          source buildozer-venv/bin/activate
          if [ -f buildozer.spec ]; then
            cp buildozer.spec buildozer.spec.backup
            sed -i 's/^#android.accept_sdk_license = .*/android.accept_sdk_license = True/' buildozer.spec || true
            sed -i 's|^#android.sdk_path = .*|android.sdk_path = /usr/local/lib/android/sdk|' buildozer.spec || true
            sed -i 's|^#android.ndk_path = .*|android.ndk_path = /usr/local/lib/android/sdk/ndk/25.2.9519653|' buildozer.spec || true
            sed -i 's/^#android.api = .*/android.api = 33/' buildozer.spec || true
            sed -i 's/^#android.minapi = .*/android.minapi = 21/' buildozer.spec || true
            sed -i 's/^#android.ndk_api = .*/android.ndk_api = 21/' buildozer.spec || true
            sed -i 's/^android.arch = .*/android.arch = arm64-v8a/' buildozer.spec || true
            if ! grep -q "android.skip_aidl_check" buildozer.spec; then
              cat >> buildozer.spec <<'EOT'

# Skip AIDL version check (CI helper)
android.skip_aidl_check = True
EOT
            fi
            echo "=== Modified buildozer.spec (head) ==="
            grep -E "^(android\.|#android\.)" buildozer.spec | head -20 || true
          else
            echo "No buildozer.spec to configure"
          fi

      - name: Build APK with Buildozer (capture logs)
        run: |
          set -o pipefail
          source buildozer-venv/bin/activate
          mkdir -p build_logs
          echo "=== Starting Buildozer Build ==="
          echo "Python version: $(python --version)"
          echo "Buildozer version: $(buildozer --version 2>/dev/null || echo 'not available')"
          echo "AIDL test (which): $(which aidl 2>/dev/null || true)"
          aidl --version 2>&1 || true
          buildozer -v android debug 2>&1 | tee build_logs/buildozer_full.log
          BUILD_STATUS=${PIPESTATUS[0]}
          echo "Build exit code: $BUILD_STATUS"
          if [ "$BUILD_STATUS" -ne 0 ]; then
            echo "Build failed with exit code: $BUILD_STATUS"
            echo "FAILED:$BUILD_STATUS" > build_logs/build_status.txt
            grep -n -E "ERROR|Error|error|FAILED|Failed|failed|Exception|Traceback|aidl" build_logs/buildozer_full.log > build_logs/errors.log || true
            echo "=== Key errors found ==="
            head -40 build_logs/errors.log || true
          else
            echo "Build completed successfully"
            echo "SUCCESS" > build_logs/build_status.txt
          fi
          exit $BUILD_STATUS

      - name: Check for APK files (always)
        if: always()
        run: |
          echo "=== Checking for APK files ==="
          find . -name "*.apk" -type f 2>/dev/null | sed -n '1,50p' || echo "No APK found"
          ls -la bin/ 2>/dev/null || true
          find .buildozer -name "*.apk" -type f 2>/dev/null | sed -n '1,50p' || true

      - name: Upload APK artifact (if found)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            bin/*.apk
            .buildozer/android/platform/build-*/dists/*/build/outputs/apk/*.apk
          if-no-files-found: warn
          retention-days: 7

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build_logs/
          retention-days: 30

      - name: Build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f "build_logs/build_status.txt" ]; then
            STATUS=$(cat build_logs/build_status.txt)
            echo "**Status:** $STATUS" >> $GITHUB_STEP_SUMMARY
          else
We need to continue: The developer message indicates the user edited document. We must respond. The user is angry. Provide fixed workflow and explain exactly change: the issue is indentation of steps in canvas file earlier showed 4 spaces '- name' vs 6â€”now we must show corrected file. The canvas content currently shows 'steps:' with items starting with 4 spaces? But the last canvas content shows '- name' with 4 spaces? It does show '    steps:' then '- name' with 4 spaces. But the canvas "details" earlier indicated that, but now we need to craft a reply. We already provided corrected YAML in previous assistant message. But user repeated angry message.

So respond in Persian: apologize, explain cause (indentation), and provide fixed YAML again (but we must not repeat too much). But user already has canvas content which they edited. Provide steps to fix: copy corrected YAML I already wrote earlier. But we must avoid repeating huge content again? However user demanded a working workflow; have to deliver. We already gave the corrected YAML. Now we should check the canvas 'Build-apk' content displayed by devâ€”it's still the broken one showing indentation of steps at wrong levels (starts with four spaces then '- name:' aligned with steps). The user expects fix. So we should paste the fully-corrected YAML (I did in previous assistant message), but now must also update the canvas textdoc to the corrected content. We attempted earlier and failed. There is canmore.update_textdoc earlier failing. We must now use canmore.update_textdoc to replace content. We must call canmore.update_textdoc only once this turn. The developer message said that the user manually edited canvas; ensure refer to latest state. We must update content accordingly. Use canmore.update_textdoc pattern to replace entire document content. But caution: cannot do multiple canvas calls. We'll call canmore.update_textdoc to replace entire document textdoc_id '68f9c7033a0c81919cd19fb4d1f42230' (we need to update current textdoc). The tool requires pattern regex to replace; we can match the entire content with (?s).* and replace with new content. Earlier attempt failed due to replacement string containing backreferences? It failed because replacement had backslashes? The error earlier: updates.0.pattern failed while calling match.expand. That happens when replacement contains \ escapes that are processed by re.expand; better to use update with multiple? But canmore.update_textdoc expects regex pattern as python regex and replacement; if replacement contains backslashes or \1 may be interpreted. To avoid expansion issues, we can use re.escape? But we cannot programmatically do that. However canmore.update_textdoc supports replacement string, but we must be careful to not include backslash sequences like \n? But new content includes backslashes in bash variable strings, e.g., "$ORIG" etc; backslashes may be fine. The failure earlier occurred when attempting to replace entire document with very long string; but it should be allowed. The error was "updates.0.pattern: failed while calling match.expand(replacement). pattern: /(?s).*/ replacement: /name: Build APK ... ensure the regex replacement is valid" It may have failed because replacement string contains backreferences like \1 etc or backslashes followed by digits. The replacement text contains sequences like "\n" in Python regex? But replacement string passed to re.Match.expand interprets backslashes. To safely replace entire content we can set pattern to r'\A[\s\S]*\Z' instead? But expand will still interpret backslashes. There's a known solution: in canmore.update_textdoc, set multiple? But we can update only the portion after a known header or replace a smaller region. Another approach: use canmore.create_textdoc to create a new document (we already created one earlier Build Apk Fixed). The developer said user's manual edits in canvas; but we can now avoid further canvas calls and instead respond with corrected YAML in chat. The user demanded working file. We already provided corrected YAML in previous assistant message. The user is angry, repeating. So perhaps just reply apologetically and paste the corrected YAML again and explain the fix concisely. Avoid further canvas calls to prevent errors.

Therefore respond in Persian: apologize, explain exact cause (indentation of steps), show corrected YAML (the same as earlier), and give instructions to paste and run. Keep tone calm and concise. Also offer to inspect new error lines if any. Let's deliver.

