name: Build Android APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies (robust, handles libtinfo)
        run: |
          set -e

          sudo apt-get update
          sudo apt-get install -y software-properties-common || true
          sudo add-apt-repository -y universe || true
          sudo apt-get update

          # نصب بسته‌های ضروری (بدون تلاش اجباری برای libtinfo5)
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            git build-essential zip unzip openjdk-17-jdk \
            autoconf automake libtool pkg-config zlib1g-dev \
            libncurses5-dev libncursesw5-dev libtinfo6 cmake \
            curl wget python3 python3-pip python3-venv python3-distutils || true

          # تلاش محتاطانه برای نصب libtinfo5 (در صورتی که در repo باشد)
          if apt-cache policy libtinfo5 | grep -q 'Candidate:'; then
            echo "libtinfo5 appears available in apt-cache; attempting install..."
            sudo apt-get install -y libtinfo5 || echo "libtinfo5 install failed; will try fallbacks"
          else
            echo "libtinfo5 not available in apt repos on this runner (expected on newer Ubuntu)."
          fi

          # اگر libtinfo5 نصب نشده، تلاش برای نصب libncurses5 به عنوان fallback
          if ! dpkg -s libtinfo5 >/dev/null 2>&1; then
            echo "libtinfo5 not present; ensuring libncurses5 is installed as fallback..."
            sudo apt-get install -y libncurses5 || echo "libncurses5 install failed or unavailable"
          fi

          # اگر هنوز libtinfo.so.5 در سیستم نیست، از libtinfo.so.6 یک symlink بساز
          if ! ldconfig -p | grep -q 'libtinfo.so.5'; then
            echo "libtinfo.so.5 not found; attempting to create compatibility symlink from libtinfo.so.6 ..."
            LIB6_PATH=$(ldconfig -p | grep 'libtinfo.so.6' | awk '{print $4; exit}' || true)
            if [ -n "$LIB6_PATH" ]; then
              # مکان رایج برای لینک‌ها
              TARGET_DIR="/usr/lib/x86_64-linux-gnu"
              if [ ! -d "$TARGET_DIR" ]; then
                TARGET_DIR="/lib/x86_64-linux-gnu"
              fi
              if [ -d "$TARGET_DIR" ]; then
                echo "Creating symlink: $TARGET_DIR/libtinfo.so.5 -> $LIB6_PATH"
                sudo ln -sf "$LIB6_PATH" "$TARGET_DIR/libtinfo.so.5" || sudo ln -sf "$LIB6_PATH" /usr/lib/libtinfo.so.5 || true
                sudo ldconfig || true
              else
                echo "Could not find a suitable directory for symlink; skipping symlink creation."
              fi
            else
              echo "libtinfo.so.6 not found either; cannot create compatibility symlink."
            fi
          else
            echo "libtinfo.so.5 already present."
          fi

          # نمایش نهایی برای دیباگ
          echo "ldconfig -p | grep libtinfo:"
          ldconfig -p | grep libtinfo || true

          # WARNING, but do not fail the whole job here (change exit code if you want strict behavior)
          if ! ldconfig -p | grep -q 'libtinfo.so.5'; then
            echo "WARNING: libtinfo.so.5 is still not available. Some native tools may fail."
            # If you prefer to fail the job instead of warning, uncomment next line:
            # exit 1
          else
            echo "libtinfo.so.5 is available (installed or symlinked)."
          fi



      - name: Set up JDK 17 (must run before sdkmanager)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Remove old Android SDK dirs (optional cleanup)
        run: |
          set -e
          rm -rf $HOME/Android/Sdk || true
          rm -rf $HOME/.android/sdk || true
          # don't remove system-wide /usr/local/lib/android/sdk which setup-android may use

      - name: Setup Android SDK (cmdline-tools + platform & build-tools)
        uses: android-actions/setup-android@v3
        with:
          packages: 'cmdline-tools;latest platform-tools platforms;android-28 build-tools;28.0.1'
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true

      - name: Detect actual SDK root and create canonical links
        id: detect_sdk
        run: |
          set -e
          CANDIDATES=(
            "$HOME/Android/Sdk"
            "/usr/local/lib/android/sdk"
            "$HOME/.android/sdk"
            "/opt/android-sdk"
          )

          DETECTED=""
          for p in "${CANDIDATES[@]}"; do
            if [ -d "$p" ]; then
              if [ -d "$p/cmdline-tools" ] || [ -d "$p/build-tools" ] || [ -d "$p/platform-tools" ]; then
                DETECTED="$p"
                break
              fi
            fi
          done

          if [ -z "$DETECTED" ]; then
            SM=$(command -v sdkmanager || true)
            if [ -n "$SM" ]; then
              DETECTED=$(dirname $(dirname $(dirname "$SM")) )
            fi
          fi

          if [ -z "$DETECTED" ]; then
            echo "Could not detect Android SDK installation. Listing some dirs for debugging:"
            ls -la /usr/local/lib || true
            ls -la $HOME || true
            exit 1
          fi

          echo "Detected SDK root: $DETECTED"
          mkdir -p "$HOME/Android"
          rm -rf "$HOME/Android/Sdk"
          ln -sfn "$DETECTED" "$HOME/Android/Sdk"
          echo "Linked $DETECTED -> $HOME/Android/Sdk"

          mkdir -p "$HOME/.buildozer/android/platform"
          ln -sfn "$DETECTED" "$HOME/.buildozer/android/platform/android-sdk"
          echo "Linked $DETECTED -> $HOME/.buildozer/android/platform/android-sdk"

          echo "::set-output name=sdk::$DETECTED"
          ls -la "$DETECTED" || true
          ls -la "$HOME/Android/Sdk" || true

      - name: Create legacy tools/bin and symlink sdkmanager (for Buildozer)
        run: |
          set -e
          SDK_ROOT="$HOME/Android/Sdk"
          echo "Creating legacy tools/bin under $SDK_ROOT if needed..."

          # create legacy tools/bin path that some tools (Buildozer) expect
          mkdir -p "$SDK_ROOT/tools/bin"

          # try to find sdkmanager in common locations and symlink it into tools/bin
          SDKMGR=""
          # 1) cmdline-tools/latest/bin
          if [ -x "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMGR="$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          fi
          # 2) cmdline-tools/<version>/bin (pick any)
          if [ -z "$SDKMGR" ]; then
            for d in "$SDK_ROOT/cmdline-tools"/*/bin/sdkmanager; do
              if [ -x "$d" ]; then
                SDKMGR="$d"
                break
              fi
            done
          fi
          # 3) platform-tools or other locations
          if [ -z "$SDKMGR" ] && command -v sdkmanager >/dev/null 2>&1; then
            SDKMGR=$(command -v sdkmanager)
          fi

          if [ -z "$SDKMGR" ]; then
            echo "sdkmanager not found; listing $SDK_ROOT contents for debug:"
            ls -la "$SDK_ROOT" || true
            exit 1
          fi

          echo "Found sdkmanager at: $SDKMGR"
          ln -sfn "$SDKMGR" "$SDK_ROOT/tools/bin/sdkmanager"
          echo "Created symlink: $SDK_ROOT/tools/bin/sdkmanager -> $SDKMGR"

          # Optionally symlink avdmanager too if Buildozer or other scripts expect it
          if [ -x "$(dirname "$SDKMGR")/avdmanager" ]; then
            ln -sfn "$(dirname "$SDKMGR")/avdmanager" "$SDK_ROOT/tools/bin/avdmanager"
            echo "Linked avdmanager"
          fi

          # ensure execute permissions
          chmod +x "$SDK_ROOT/tools/bin/sdkmanager" || true
          ls -la "$SDK_ROOT/tools/bin" || true

      - name: Debug show sdkmanager and installed dirs
        run: |
          set -e
          echo "sdkmanager path: $(command -v sdkmanager || echo 'not found')"
          echo "Canonical SDK: $HOME/Android/Sdk"
          ls -la $HOME/Android/Sdk || true
          ls -la $HOME/Android/Sdk/tools || true
          ls -la $HOME/Android/Sdk/tools/bin || true
          ls -la $HOME/Android/Sdk/cmdline-tools || true
          ls -la $HOME/Android/Sdk/build-tools || true

      - name: Verify installed build-tools and aidl
        run: |
          set -e
          if [ -x "$HOME/Android/Sdk/build-tools/28.0.1/aidl" ]; then
            echo "aidl present"
          else
            echo "aidl NOT found; listing build-tools:"
            ls -la "$HOME/Android/Sdk/build-tools" || true
            exit 1
          fi

      - name: Build APK
        uses: digreatbrian/buildozer-action@v2
        with:
          python-version: 3.11
          buildozer-cmd: buildozer -v android debug
        env:
          ANDROID_SDK_ROOT: $HOME/Android/Sdk
          ANDROID_HOME: $HOME/Android/Sdk

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: ./bin/*.apk
