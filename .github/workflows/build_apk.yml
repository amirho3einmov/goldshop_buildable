name: Build APK (use repo buildozer.spec)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Java (OpenJDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install system packages (incl. rsync)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git python3-pip python3-dev build-essential unzip zip \
            libncurses-dev libtinfo-dev libssl-dev libffi-dev liblzma-dev libbz2-dev zlib1g-dev \
            autoconf automake libtool pkg-config curl ca-certificates rsync

      - name: Install Android SDK cmdline-tools, platform-tools, build-tools and NDK
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        run: |
          set -e
          sudo mkdir -p "$ANDROID_SDK_ROOT"
          sudo chown -R $USER:$USER "$ANDROID_SDK_ROOT"

          cd /tmp
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip

          TMPDIR=$(mktemp -d)
          unzip -q commandlinetools-linux-9477386_latest.zip -d "$TMPDIR"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"

          if [ -d "$TMPDIR/cmdline-tools" ]; then
            SRC_DIR="$TMPDIR/cmdline-tools"
          else
            SRC_DIR="$TMPDIR"
          fi

          if command -v rsync >/dev/null 2>&1; then
            rsync -a "$SRC_DIR/" "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
          else
            cp -a "$SRC_DIR/." "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
          fi

          rm -rf "$TMPDIR"
          rm -f commandlinetools-linux-9477386_latest.zip

          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"

          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653"

          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses || true

          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

          echo "$ANDROID_SDK_ROOT/build-tools/33.0.2" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

          if [ -f "$ANDROID_SDK_ROOT/build-tools/33.0.2/aidl" ]; then
            sudo ln -sf "$ANDROID_SDK_ROOT/build-tools/33.0.2/aidl" /usr/local/bin/aidl
            sudo chmod +x "$ANDROID_SDK_ROOT/build-tools/33.0.2/aidl"
          fi

          echo "=== AIDL check ==="
          which aidl || true
          ls -la "$ANDROID_SDK_ROOT/build-tools/33.0.2/" | head -20
          "$ANDROID_SDK_ROOT/build-tools/33.0.2/aidl" --version || echo "aidl version check failed"

      - name: Set up Python virtual environment
        run: |
          python3 -m venv buildozer-venv
          source buildozer-venv/bin/activate
          echo "VIRTUAL_ENV=$PWD/buildozer-venv" >> $GITHUB_ENV
          echo "$PWD/buildozer-venv/bin" >> $GITHUB_PATH

      - name: Install buildozer & python deps
        run: |
          source buildozer-venv/bin/activate
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --upgrade Cython virtualenv
          python3 -m pip install --upgrade buildozer
          buildozer --version

      - name: Configure buildozer environment (write android_env.sh into both HOME and workspace)
        env:
          # GITHUB_WORKSPACE is provided by GitHub Actions automatically
          WORKSPACE: ${{ github.workspace }}
        run: |
          # ensure both locations exist and write the same android_env.sh to both
          mkdir -p "$HOME/.buildozer"
          mkdir -p "$WORKSPACE/.buildozer"

          # file content
          echo 'export ANDROID_SDK_ROOT="/usr/local/lib/android/sdk"' > "$HOME/.buildozer/android_env.sh"
          echo 'export ANDROID_NDK_HOME="/usr/local/lib/android/sdk/ndk/25.2.9519653"' >> "$HOME/.buildozer/android_env.sh"
          echo 'export ANDROID_HOME="/usr/local/lib/android/sdk"' >> "$HOME/.buildozer/android_env.sh"
          echo 'export PATH="/usr/local/lib/android/sdk/build-tools/33.0.2:$PATH"' >> "$HOME/.buildozer/android_env.sh"
          echo 'export PATH="/usr/local/lib/android/sdk/platform-tools:$PATH"' >> "$HOME/.buildozer/android_env.sh"
          echo 'export PATH="/usr/local/lib/android/sdk/cmdline-tools/latest/bin:$PATH"' >> "$HOME/.buildozer/android_env.sh"
          chmod +x "$HOME/.buildozer/android_env.sh"

          # duplicate into workspace location (so sourcing WORKSPACE/.buildozer/android_env.sh works)
          cp -a "$HOME/.buildozer/android_env.sh" "$WORKSPACE/.buildozer/android_env.sh"
          chmod +x "$WORKSPACE/.buildozer/android_env.sh"

          # also persist envs for later steps
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV

      - name: Show existing buildozer.spec (we will use repo file, not overwrite)
        run: |
          echo "=== buildozer.spec in repo ==="
          if [ -f buildozer.spec ]; then
            sed -n '1,200p' buildozer.spec || true
          else
            echo "Error: buildozer.spec not found in repo. Aborting."
            exit 1
          fi

      - name: Prepare buildozer directories (symlink SDK where buildozer expects)
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          mkdir -p "$WORKSPACE/.buildozer"
          mkdir -p "$WORKSPACE/.buildozer/android/platform"
          mkdir -p "$WORKSPACE/.buildozer/android/platform/android-sdk"
          ln -sf /usr/local/lib/android/sdk/* "$WORKSPACE/.buildozer/android/platform/android-sdk/" || true
          mkdir -p "$WORKSPACE/.buildozer/android/platform/android-sdk/build-tools"
          ln -sf /usr/local/lib/android/sdk/build-tools/33.0.2 "$WORKSPACE/.buildozer/android/platform/android-sdk/build-tools/33.0.2" || true

      - name: Build APK (debug) using repo buildozer.spec
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
          ANDROID_HOME: /usr/local/lib/android/sdk
          ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
          HOME: ${{ github.workspace }}
          WORKSPACE: ${{ github.workspace }}
        run: |
          source buildozer-venv/bin/activate

          # Try to source the android_env from workspace, otherwise from HOME (runner)
          if [ -f "$WORKSPACE/.buildozer/android_env.sh" ]; then
            echo "sourcing from workspace: $WORKSPACE/.buildozer/android_env.sh"
            source "$WORKSPACE/.buildozer/android_env.sh"
          elif [ -f "$HOME/.buildozer/android_env.sh" ]; then
            echo "sourcing from home: $HOME/.buildozer/android_env.sh"
            source "$HOME/.buildozer/android_env.sh"
          else
            echo "Error: android_env.sh not found in workspace or HOME"
            ls -la "$WORKSPACE" || true
            exit 1
          fi

          echo "=== Environment Verification ==="
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
          echo "PATH: $PATH"

          echo "=== AIDL Verification ==="
          which aidl || echo "AIDL not in PATH"
          find /usr/local/lib/android/sdk -name "aidl" -type f 2>/dev/null | head -5
          if [ -f "/usr/local/lib/android/sdk/build-tools/33.0.2/aidl" ]; then
            echo "AIDL found at: /usr/local/lib/android/sdk/build-tools/33.0.2/aidl"
            /usr/local/lib/android/sdk/build-tools/33.0.2/aidl --version || echo "Could not get AIDL version"
          else
            echo "AIDL not found in expected location"
            find /usr/local/lib/android/sdk -name "aidl" -exec ls -la {} \; 2>/dev/null || echo "No AIDL found in SDK"
          fi

          echo "=== Starting Buildozer ==="
          buildozer --verbose android debug

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: bin/*.apk
