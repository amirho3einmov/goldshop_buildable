name: Build Android APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y software-properties-common || true
          sudo add-apt-repository -y universe || true
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            git build-essential zip unzip openjdk-17-jdk \
            autoconf automake libtool pkg-config zlib1g-dev \
            libncurses5-dev libncursesw5-dev libtinfo6 cmake \
            curl wget python3 python3-pip python3-venv python3-distutils || true

          # libtinfo5 fallback
          if ! dpkg -s libtinfo5 >/dev/null 2>&1; then
            if sudo apt-get install -y libtinfo5; then
              echo "libtinfo5 installed."
            elif sudo apt-get install -y libncurses5; then
              echo "libncurses5 installed as fallback."
            else
              wget -q http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb -O libtinfo5.deb || true
              if [ -f libtinfo5.deb ]; then
                sudo apt-get install -y ./libtinfo5.deb || sudo dpkg -i libtinfo5.deb || true
                sudo apt-get install -f -y || true
                rm -f libtinfo5.deb
              else
                echo "libtinfo5 unavailable; proceeding."
              fi
            fi
          fi

      - name: Set up JDK 17 (must run before sdkmanager)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Print Java info (debug)
        run: |
          java -version || true
          echo "JAVA_HOME=$JAVA_HOME" || true

      - name: Remove old Android SDK dirs (clean install)
        run: |
          set -e
          rm -rf $HOME/Android/Sdk || true
          rm -rf $HOME/.android/sdk || true
          mkdir -p $HOME/Android || true

      - name: Setup Android SDK (cmdline-tools + platform & build-tools)
        uses: android-actions/setup-android@v3
        with:
          # IMPORTANT: space-separated list (NOT comma-separated)
          packages: 'cmdline-tools;latest platform-tools platforms;android-28 build-tools;28.0.1'
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true

      - name: Debug show sdkmanager and installed dirs
        run: |
          set -e
          echo "sdkmanager path: $(command -v sdkmanager || echo 'not found')"
          ls -la $HOME/Android/Sdk || true
          ls -la $HOME/Android/Sdk/cmdline-tools || true
          ls -la $HOME/Android/Sdk/build-tools || true

      - name: Link SDK into Buildozer expected location
        run: |
          set -e
          mkdir -p ~/.buildozer/android/platform
          ln -sfn $HOME/Android/Sdk $HOME/.buildozer/android/platform/android-sdk
          echo "Linked $HOME/Android/Sdk -> $HOME/.buildozer/android/platform/android-sdk"
          ls -la $HOME/.buildozer/android/platform || true

      - name: Verify installed build-tools and aidl
        run: |
          set -e
          if [ -x "$HOME/Android/Sdk/build-tools/28.0.1/aidl" ]; then
            echo "aidl present: $HOME/Android/Sdk/build-tools/28.0.1/aidl"
          else
            echo "aidl not found at expected path:"
            ls -la "$HOME/Android/Sdk/build-tools" || true
            exit 1
          fi

      - name: Build APK
        uses: digreatbrian/buildozer-action@v2
        with:
          python-version: 3.8
          buildozer-cmd: buildozer -v android debug
        env:
          ANDROID_SDK_ROOT: $HOME/Android/Sdk

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: ./bin/*.apk
