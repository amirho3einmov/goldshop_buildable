name: Build APK (fixed AIDL issue)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup Java (OpenJDK 17)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install system packages
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git python3-pip python3-dev build-essential unzip zip \
          libncurses-dev libtinfo-dev libssl-dev libffi-dev liblzma-dev libbz2-dev zlib1g-dev \
          autoconf automake libtool pkg-config curl ca-certificates

    - name: Install Android SDK and NDK
      run: |
        set -e
        
        # Create Android SDK directory
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        sudo mkdir -p $ANDROID_SDK_ROOT
        sudo chown -R $USER:$USER $ANDROID_SDK_ROOT
        
        # Download and install command line tools
        cd /tmp
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest
        unzip -q commandlinetools-linux-9477386_latest.zip -d $ANDROID_SDK_ROOT/cmdline-tools/latest
        mv $ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools/* $ANDROID_SDK_ROOT/cmdline-tools/latest/
        rm -rf $ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools
        rm commandlinetools-linux-9477386_latest.zip
        
        # Set PATH for sdkmanager
        export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
        
        # Pre-accept all licenses
        mkdir -p $ANDROID_SDK_ROOT/licenses
        echo -e "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo -e "84831b9409646a918e30573bab4c9c91346d8abd" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo -e "d56f5187479451eabf01fb78af6dfcb131a6481e" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo -e "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
        echo -e "504667f4c0de7af1a06de9f4b1727b84351f2910" >> $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
        
        # Install platform tools first
        sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools"
        
        # Install platforms and build-tools
        sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platforms;android-33"
        sdkmanager --sdk_root=$ANDROID_SDK_ROOT "build-tools;33.0.2"
        
        # Install NDK
        sdkmanager --sdk_root=$ANDROID_SDK_ROOT "ndk;25.2.9519653"
        
        # Accept licenses again to be sure
        yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses > /dev/null 2>&1 || true
        
        # Verify AIDL is available
        echo "=== Checking AIDL ==="
        find $ANDROID_SDK_ROOT -name "aidl" -type f | head -5
        $ANDROID_SDK_ROOT/build-tools/33.0.2/aidl --version || echo "AIDL version check failed but continuing"

    - name: Set up Python virtual environment
      run: |
        python3 -m venv buildozer-venv
        source buildozer-venv/bin/activate
        echo "VIRTUAL_ENV=$PWD/buildozer-venv" >> $GITHUB_ENV
        echo "$PWD/buildozer-venv/bin" >> $GITHUB_PATH

    - name: Install buildozer & python deps
      run: |
        source buildozer-venv/bin/activate
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install --upgrade Cython virtualenv
        python3 -m pip install --upgrade buildozer
        buildozer --version

    - name: Configure buildozer environment
      run: |
        echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
        
        # Create critical environment file for buildozer
        mkdir -p $HOME/.buildozer
        cat > $HOME/.buildozer/android_env.sh << 'EOF'
export ANDROID_SDK_ROOT="/usr/local/lib/android/sdk"
export ANDROID_NDK_HOME="/usr/local/lib/android/sdk/ndk/25.2.9519653"
export ANDROID_HOME="/usr/local/lib/android/sdk"
export PATH="/usr/local/lib/android/sdk/build-tools/33.0.2:$PATH"
export PATH="/usr/local/lib/android/sdk/platform-tools:$PATH"
export PATH="/usr/local/lib/android/sdk/cmdline-tools/latest/bin:$PATH"
EOF

    - name: Create proper buildozer.spec
      run: |
        if [ ! -f buildozer.spec ]; then
          buildozer init
        fi
        
        # Create a clean buildozer.spec that uses system SDK
        cat > buildozer.spec << 'EOF'
[app]
title = MyApp
package.name = myapp
package.domain = org.mydomain
source.dir = .
source.include_exts = py,png,jpg,kv,atlas
version = 0.1
requirements = python3,kivy
orientation = portrait
osx.python_version = 3
osx.kivy_version = 1.9.1
fullscreen = 0

[buildozer]
log_level = 2
warn_on_root = 1

[app:android]
# Use system Android SDK
android.sdk_path = /usr/local/lib/android/sdk
android.ndk_path = /usr/local/lib/android/sdk/ndk/25.2.9519653
android.ndk_version = 25b
android.api = 33
android.minapi = 21
android.sdk_build_tools = 33.0.2
android.accept_sdk_license = True
android.allow_backup = True
android.fast_async = True

# Python-for-Android settings
p4a.branch = develop
p4a.options = --dir=./

# Permissions
android.permissions = INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE

# Archs
android.arch = arm64-v8a, armeabi-v7a

# Presplash and icon (adjust paths as needed)
# presplash.filename = %(source.dir)s/presplash.png
# icon.filename = %(source.dir)s/icon.png
EOF

        echo "=== Final buildozer.spec ==="
        cat buildozer.spec

    - name: Prepare buildozer directories
      run: |
        export HOME="${GITHUB_WORKSPACE}"
        mkdir -p "$HOME/.buildozer"
        mkdir -p "$HOME/.buildozer/android/platform"
        
        # Create symlinks so buildozer finds the SDK where it expects
        mkdir -p "$HOME/.buildozer/android/platform/android-sdk"
        ln -sf /usr/local/lib/android/sdk/* "$HOME/.buildozer/android/platform/android-sdk/" || true
        
        # Specifically ensure build-tools are linked
        mkdir -p "$HOME/.buildozer/android/platform/android-sdk/build-tools"
        ln -sf /usr/local/lib/android/sdk/build-tools/33.0.2 "$HOME/.buildozer/android/platform/android-sdk/build-tools/33.0.2" || true

    - name: Build APK (debug)
      env:
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        ANDROID_HOME: /usr/local/lib/android/sdk
        ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
        HOME: ${{ github.workspace }}
      run: |
        source buildozer-venv/bin/activate
        source $HOME/.buildozer/android_env.sh
        
        echo "=== Environment Verification ==="
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "PATH: $PATH"
        
        echo "=== AIDL Verification ==="
        which aidl || echo "AIDL not in PATH"
        find /usr/local/lib/android/sdk -name "aidl" -type f 2>/dev/null | head -5
        if [ -f "/usr/local/lib/android/sdk/build-tools/33.0.2/aidl" ]; then
          echo "AIDL found at: /usr/local/lib/android/sdk/build-tools/33.0.2/aidl"
          /usr/local/lib/android/sdk/build-tools/33.0.2/aidl --version || echo "Could not get AIDL version"
        else
          echo "AIDL not found in expected location"
          # Try to find AIDL anywhere
          find /usr/local/lib/android/sdk -name "aidl" -exec ls -la {} \; 2>/dev/null || echo "No AIDL found in SDK"
        fi
        
        echo "=== Build Tools Contents ==="
        ls -la /usr/local/lib/android/sdk/build-tools/33.0.2/ | head -10
        
        echo "=== Starting Buildozer ==="
        buildozer --version
        buildozer -v android debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: apk
        path: bin/*.apk
      if: always()
