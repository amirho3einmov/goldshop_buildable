# GitHub Actions workflow: Build Android APK with Buildozer
# - Installs required system packages (with libtinfo5 fallback)
# - Sets up JDK
# - Installs Android cmdline-tools + specific build-tools (28.0.1) and platforms;android-28
# - Links SDK to the location that Buildozer expects
# - Runs buildozer to produce an APK and uploads it as an artifact

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Use shell $HOME instead of invalid expression runner.home
      ANDROID_SDK_ROOT: $HOME/.android/sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          set -e

          # enable universe and update (software-properties-common for add-apt-repository)
          sudo apt-get update
          sudo apt-get install -y software-properties-common || true
          sudo add-apt-repository -y universe || true
          sudo apt-get update

          # install common packages (allow failure and handle fallbacks below)
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            git \
            build-essential \
            zip \
            unzip \
            openjdk-17-jdk \
            autoconf \
            automake \
            libtool \
            pkg-config \
            zlib1g-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo6 \
            cmake \
            curl \
            wget \
            python3 \
            python3-pip \
            python3-venv \
            python3-distutils || true

          # Try to ensure libtinfo5 is available (some ubuntu images only have libtinfo6)
          if ! dpkg -s libtinfo5 >/dev/null 2>&1; then
            echo "Trying to install libtinfo5 from repos..."
            if sudo apt-get install -y libtinfo5; then
              echo "libtinfo5 installed from repo."
            else
              echo "libtinfo5 not available from repos — trying libncurses5 as compatible fallback..."
              if sudo apt-get install -y libncurses5; then
                echo "libncurses5 installed (provides compatible libtinfo symbols)."
              else
                echo "libncurses5 not available either — downloading libtinfo5 .deb as fallback..."
                # NOTE: If your organization forbids external downloads, replace this with an internal mirror.
                wget -q http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb -O libtinfo5.deb || true
                if [ -f libtinfo5.deb ]; then
                  sudo apt-get install -y ./libtinfo5.deb || (sudo dpkg -i libtinfo5.deb || true)
                  sudo apt-get install -f -y || true
                  rm -f libtinfo5.deb
                else
                  echo "Could not download libtinfo5.deb — continuing and hoping libtinfo6 is sufficient."
                fi
              fi
            fi
          else
            echo "libtinfo5 already present."
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android cmdline-tools + platform-tools
        uses: android-actions/setup-android@v3
        with:
          packages: 'cmdline-tools;latest,platform-tools'

      - name: Ensure ANDROID_SDK_ROOT and install specific build-tools (28.0.1)
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT"

          # Add sdkmanager to PATH at runtime using $ANDROID_SDK_ROOT
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"

          # If sdkmanager is not on PATH, try to locate it in common locations
          if ! command -v sdkmanager >/dev/null 2>&1; then
            if [ -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
              export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
            fi
          fi

          # Accept licenses and install required SDK components explicitly
          echo "y" | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses || true

          echo "Installing platform-tools, platforms;android-28 and build-tools;28.0.1"
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-28" "build-tools;28.0.1"

          echo "Installed build-tools listing:"
          ls -la "$ANDROID_SDK_ROOT/build-tools" || true

          # Quick check for aidl in the installed build-tools
          if [ -x "$ANDROID_SDK_ROOT/build-tools/28.0.1/aidl" ]; then
            echo "aidl executable is present at $ANDROID_SDK_ROOT/build-tools/28.0.1/aidl"
          else
            echo "aidl not found at expected path; listing build-tools dirs:"
            ls -la "$ANDROID_SDK_ROOT/build-tools" || true
            # fail the job so we can inspect logs; comment out exit 1 if you prefer soft-failure
            exit 1
          fi

      - name: Link SDK into Buildozer expected location
        run: |
          mkdir -p ~/.buildozer/android/platform
          ln -sfn $HOME/.android/sdk ~/.buildozer/android/platform/android-sdk
          echo "Linked $HOME/.android/sdk -> ~/.buildozer/android/platform/android-sdk"

      - name: Build APK
        uses: digreatbrian/buildozer-action@v2
        with:
          python-version: 3.8
          buildozer-cmd: buildozer -v android debug
        env:
          # pass SDK root into the build step as well
          ANDROID_SDK_ROOT: $HOME/.android/sdk

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: ./bin/*.apk
