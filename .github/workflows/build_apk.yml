name: Build APK (Fixed Virtual Environment)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          build-essential \
          zip \
          unzip \
          openjdk-17-jdk \
          autoconf \
          automake \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo6 \
          cmake \
          curl \
          wget \
          python3 \
          python3-pip \
          python3-venv

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Create and activate virtual environment
      run: |
        python3 -m venv buildozer-venv
        source buildozer-venv/bin/activate
        echo "VIRTUAL_ENV=$PWD/buildozer-venv" >> $GITHUB_ENV
        echo "$PWD/buildozer-venv/bin" >> $GITHUB_PATH

    - name: Install Python dependencies in virtual environment
      run: |
        source buildozer-venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install --upgrade \
          buildozer \
          Cython==0.29.33 \
          virtualenv \
          setuptools \
          wheel

    - name: Install Android SDK and NDK
      run: |
        # Create Android SDK directory
        /usr/bin/mkdir -p "$HOME/android-sdk"
        export ANDROID_SDK_ROOT="$HOME/android-sdk"
        export ANDROID_HOME="$ANDROID_SDK_ROOT"
        
        # Download and install Android Command Line Tools
        cd "$HOME"
        /usr/bin/curl -OL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        /usr/bin/unzip -q commandlinetools-linux-9477386_latest.zip
        /usr/bin/mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
        /usr/bin/mv cmdline-tools/* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
        /usr/bin/rm -rf cmdline-tools commandlinetools-linux-9477386_latest.zip
        
        # Add to PATH
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        
        # Set environment variables
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV

    - name: Install Android packages
      run: |
        source buildozer-venv/bin/activate
        # Accept licenses
        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses
        
        # Install required packages
        "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
          "platform-tools" \
          "platforms;android-33" \
          "build-tools;33.0.2" \
          "ndk;25.2.9519653"
        
        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

    - name: Create buildozer spec if missing
      run: |
        source buildozer-venv/bin/activate
        if [ ! -f buildozer.spec ]; then
          echo "Creating default buildozer.spec file..."
          buildozer init
        else
          echo "buildozer.spec already exists"
        fi

    - name: Build APK with Buildozer
      env:
        ANDROID_SDK_ROOT: $HOME/android-sdk
        ANDROID_HOME: $HOME/android-sdk
        ANDROID_NDK_HOME: $HOME/android-sdk/ndk/25.2.9519653
        ANDROID_NDK_ROOT: $HOME/android-sdk/ndk/25.2.9519653
      run: |
        source buildozer-venv/bin/activate
        
        # Create logs directory using absolute path
        /usr/bin/mkdir -p build_logs
        
        echo "=== Starting Buildozer Build ==="
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer --version 2>/dev/null || echo 'not available')"
        echo "PATH: $PATH"
        
        # Build with timeout and logging
        /usr/bin/timeout 45m buildozer -v android debug 2>&1 | /usr/bin/tee build_logs/buildozer_full.log
        
        BUILD_STATUS=${PIPESTATUS[0]}
        
        if [ $BUILD_STATUS -eq 124 ]; then
          echo "Build timed out after 45 minutes"
          /usr/bin/echo "TIMEOUT" > build_logs/build_status.txt
        elif [ $BUILD_STATUS -ne 0 ]; then
          echo "Build failed with exit code: $BUILD_STATUS"
          /usr/bin/echo "FAILED:$BUILD_STATUS" > build_logs/build_status.txt
        else
          echo "Build completed successfully"
          /usr/bin/echo "SUCCESS" > build_logs/build_status.txt
        fi
        
        # Capture key error patterns
        /usr/bin/grep -n -E "ERROR|Error|error|FAILED|Failed|failed|Exception|Traceback" build_logs/buildozer_full.log > build_logs/errors.log || true
        
        exit $BUILD_STATUS

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
        retention-days: 7

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: build_logs/
        retention-days: 30
