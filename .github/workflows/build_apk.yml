name: Build APK (robust, uses repo buildozer.spec)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java (OpenJDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install system packages (rsync, wget, unzip, etc.)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git python3-pip python3-dev build-essential unzip zip wget \
            libncurses-dev libtinfo-dev libssl-dev libffi-dev liblzma-dev libbz2-dev zlib1g-dev \
            autoconf automake libtool pkg-config curl ca-certificates rsync

      - name: Install Android SDK cmdline-tools, platform-tools, build-tools and NDK
        env:
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        run: |
          set -e
          SDK_ROOT="$ANDROID_SDK_ROOT"
          sudo mkdir -p "$SDK_ROOT"
          sudo chown -R $USER:$USER "$SDK_ROOT"

          cd /tmp
          ZIP="commandlinetools-linux-9477386_latest.zip"
          wget -q "https://dl.google.com/android/repository/${ZIP}"

          TMPDIR=$(mktemp -d)
          unzip -q "$ZIP" -d "$TMPDIR"
          mkdir -p "$SDK_ROOT/cmdline-tools/latest"

          if [ -d "$TMPDIR/cmdline-tools" ]; then
            SRC_DIR="$TMPDIR/cmdline-tools"
          else
            SRC_DIR="$TMPDIR"
          fi

          if command -v rsync >/dev/null 2>&1; then
            rsync -a "$SRC_DIR/" "$SDK_ROOT/cmdline-tools/latest/"
          else
            cp -a "$SRC_DIR/." "$SDK_ROOT/cmdline-tools/latest/"
          fi

          rm -rf "$TMPDIR"
          rm -f "$ZIP"

          # Make sdkmanager available for later steps (persist into PATH)
          echo "$SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$SDK_ROOT/build-tools/33.0.2" >> $GITHUB_PATH

          export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"

          # Install required SDK pieces non-interactively
          sdkmanager --sdk_root="$SDK_ROOT" "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653"

          # Accept licenses
          yes | sdkmanager --sdk_root="$SDK_ROOT" --licenses || true

          # Persist environment variables for later steps
          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

          # Symlink aidl to /usr/local/bin so it's resolvable as a command
          if [ -f "$SDK_ROOT/build-tools/33.0.2/aidl" ]; then
            sudo ln -sf "$SDK_ROOT/build-tools/33.0.2/aidl" /usr/local/bin/aidl
            sudo chmod +x "$SDK_ROOT/build-tools/33.0.2/aidl"
          fi

          # Diagnostics (appear in logs)
          echo "=== SDK installed (diagnostics) ==="
          which sdkmanager || true
          sdkmanager --version || true
          which aidl || true
          ls -la "$SDK_ROOT/build-tools/33.0.2" | head -20 || true

      - name: Set up Python venv & install buildozer
        run: |
          python3 -m venv buildozer-venv
          source buildozer-venv/bin/activate
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --upgrade Cython virtualenv
          python3 -m pip install --upgrade buildozer
          buildozer --version || true
        shell: bash

      - name: Configure android env script (write to both HOME and workspace)
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          # ensure both dirs exist
          mkdir -p "$HOME/.buildozer"
          mkdir -p "$WORKSPACE/.buildozer"

          # write identical android_env.sh to both locations
          echo 'export ANDROID_SDK_ROOT="/usr/local/lib/android/sdk"' > "$HOME/.buildozer/android_env.sh"
          echo 'export ANDROID_NDK_HOME="/usr/local/lib/android/sdk/ndk/25.2.9519653"' >> "$HOME/.buildozer/android_env.sh"
          echo 'export ANDROID_HOME="/usr/local/lib/android/sdk"' >> "$HOME/.buildozer/android_env.sh"
          echo 'export PATH="/usr/local/lib/android/sdk/build-tools/33.0.2:$PATH"' >> "$HOME/.buildozer/android_env.sh"
          echo 'export PATH="/usr/local/lib/android/sdk/platform-tools:$PATH"' >> "$HOME/.buildozer/android_env.sh"
          echo 'export PATH="/usr/local/lib/android/sdk/cmdline-tools/latest/bin:$PATH"' >> "$HOME/.buildozer/android_env.sh"
          chmod +x "$HOME/.buildozer/android_env.sh"

          cp -a "$HOME/.buildozer/android_env.sh" "$WORKSPACE/.buildozer/android_env.sh"
          chmod +x "$WORKSPACE/.buildozer/android_env.sh"

          # also persist envs (safe duplicate)
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV

      - name: Validate repo buildozer.spec exists
        run: |
          echo "=== Checking for buildozer.spec in repo ==="
          if [ -f buildozer.spec ]; then
            sed -n '1,200p' buildozer.spec || true
          else
            echo "Error: buildozer.spec not found in repository root. Aborting."
            exit 1
          fi

      - name: Prepare buildozer workspace layout & legacy symlinks
        env:
          WORKSPACE: ${{ github.workspace }}
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        run: |
          set -e
          # create workspace .buildozer layout
          mkdir -p "$WORKSPACE/.buildozer/android/platform/android-sdk"

          # Link SDK contents into workspace .buildozer (so buildozer can find platforms/build-tools/platform-tools)
          ln -sfn "$ANDROID_SDK_ROOT/"* "$WORKSPACE/.buildozer/android/platform/android-sdk/" || true

          # Ensure build-tools version link exists
          mkdir -p "$WORKSPACE/.buildozer/android/platform/android-sdk/build-tools"
          ln -sfn "$ANDROID_SDK_ROOT/build-tools/33.0.2" "$WORKSPACE/.buildozer/android/platform/android-sdk/build-tools/33.0.2" || true

          # Create legacy tools/bin and link sdkmanager & avdmanager there (p4a/buildozer compatibility)
          mkdir -p "$WORKSPACE/.buildozer/android/platform/android-sdk/tools/bin"
          if [ -f "/usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager" ]; then
            ln -sfn "/usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager" \
                   "$WORKSPACE/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager"
          fi
          if [ -f "/usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager" ]; then
            ln -sfn "/usr/local/lib/android/sdk/cmdline-tools/latest/bin/avdmanager" \
                   "$WORKSPACE/.buildozer/android/platform/android-sdk/tools/bin/avdmanager"
          fi

          # Also link the cmdline-tools bin files into the workspace path (defensive)
          mkdir -p "$WORKSPACE/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin"
          ln -sfn "/usr/local/lib/android/sdk/cmdline-tools/latest/bin/"* \
                 "$WORKSPACE/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/" || true

          chmod -R a+rx "$WORKSPACE/.buildozer/android/platform/android-sdk" || true

          # Create a workspace symlink for the NDK that buildozer expects (android-ndk-r25b)
          INSTALLED_NDK="$ANDROID_SDK_ROOT/ndk/25.2.9519653"
          TARGET_NDK_DIR="$WORKSPACE/.buildozer/android/platform/android-ndk-r25b"
          mkdir -p "$(dirname "$TARGET_NDK_DIR")"
          ln -sfn "$INSTALLED_NDK" "$TARGET_NDK_DIR" || true
          echo "Linked NDK: $TARGET_NDK_DIR -> $(readlink -f $TARGET_NDK_DIR)" || true

          echo "=== workspace SDK snapshot ==="
          ls -la "$WORKSPACE/.buildozer/android/platform/android-sdk" | head -40 || true
          echo "=== legacy tools/bin ==="
          ls -la "$WORKSPACE/.buildozer/android/platform/android-sdk/tools/bin" || true
          echo "=== NDK link ==="
          ls -la "$TARGET_NDK_DIR" || true

      - name: Build APK (debug) using repo buildozer.spec
        env:
          WORKSPACE: ${{ github.workspace }}
          ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
          ANDROID_HOME: /usr/local/lib/android/sdk
          ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/25.2.9519653
          HOME: ${{ github.workspace }}
        run: |
          set -e
          source buildozer-venv/bin/activate

          # Source android_env from workspace first (where buildozer expects), else fallback to HOME
          if [ -f "$WORKSPACE/.buildozer/android_env.sh" ]; then
            echo "Sourcing android_env from workspace"
            source "$WORKSPACE/.buildozer/android_env.sh"
          elif [ -f "$HOME/.buildozer/android_env.sh" ]; then
            echo "Sourcing android_env from HOME"
            source "$HOME/.buildozer/android_env.sh"
          else
            echo "Error: android_env.sh not found in workspace or HOME"
            exit 1
          fi

          echo "=== Env check before build ==="
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
          echo "PATH=$PATH"

          echo "=== Tools diagnostics ==="
          echo "Which sdkmanager:"
          which sdkmanager || true
          sdkmanager --version || true
          echo "Which aidl:"
          which aidl || true
          if [ -f "/usr/local/lib/android/sdk/build-tools/33.0.2/aidl" ]; then
            /usr/local/lib/android/sdk/build-tools/33.0.2/aidl --version || true
          fi
          echo "List legacy tools/bin (workspace):"
          ls -la "$WORKSPACE/.buildozer/android/platform/android-sdk/tools/bin" || true

          echo "=== Starting Buildozer build ==="
          # use the buildozer.spec already in repo (do not init/overwrite)
          buildozer --verbose android debug

      - name: Save filtered logs (debug)
        if: always()
        run: |
          mkdir -p build_logs
          # collect likely p4a / buildozer logs under .buildozer
          find . -path "./.buildozer/*" -type f -name "*.log" -o -name "*log*" -maxdepth 6 -print > /tmp/logfiles || true
          cat /tmp/logfiles || true
          for f in $(cat /tmp/logfiles 2>/dev/null); do
            echo "==== FILE: $f ====" >> build_logs/combined.log
            sed -n '1,4000p' "$f" >> build_logs/combined.log || true
            echo "" >> build_logs/combined.log
          done
          if [ ! -s build_logs/combined.log ]; then
            echo "No buildozer log files found; trying to save last 2000 lines of job summary (if present)." > build_logs/combined.log
            [ -f "$GITHUB_STEP_SUMMARY" ] && tail -n 2000 "$GITHUB_STEP_SUMMARY" >> build_logs/combined.log || true
          fi
          grep -n -E "Traceback|ERROR|Exception|Command failed|Buildozer failed|Caused by|Killed|OutOfMemory|No such file or directory|Permission denied|ndk|aidl|sdkmanager" build_logs/combined.log > build_logs/filtered.log || true
          first=$(grep -n "Traceback (most recent call last)" build_logs/combined.log | head -n1 | cut -d: -f1 || true)
          if [ -n "$first" ]; then
            start=$((first-20))
            if [ $start -lt 1 ]; then start=1; fi
            sed -n "${start},$((first+200))p" build_logs/combined.log > build_logs/traceback_chunk.log || true
          fi
          echo "Saved filtered logs to build_logs/"

      - name: Upload filtered logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: filtered-logs
          path: build_logs/

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: bin/*.apk
