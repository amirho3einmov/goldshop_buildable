name: Build Android APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # expand HOME at workflow-evaluation time so the action receives a real path
      ANDROID_SDK_ROOT: ${{ env.HOME }}/.android/sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y software-properties-common || true
          sudo add-apt-repository -y universe || true
          sudo apt-get update

          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
            git \
            build-essential \
            zip \
            unzip \
            openjdk-17-jdk \
            autoconf \
            automake \
            libtool \
            pkg-config \
            zlib1g-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo6 \
            cmake \
            curl \
            wget \
            python3 \
            python3-pip \
            python3-venv \
            python3-distutils || true

          if ! dpkg -s libtinfo5 >/dev/null 2>&1; then
            if sudo apt-get install -y libtinfo5; then
              echo "libtinfo5 installed."
            elif sudo apt-get install -y libncurses5; then
              echo "libncurses5 installed as fallback."
            else
              wget -q http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb -O libtinfo5.deb || true
              if [ -f libtinfo5.deb ]; then
                sudo apt-get install -y ./libtinfo5.deb || sudo dpkg -i libtinfo5.deb || true
                sudo apt-get install -f -y || true
                rm -f libtinfo5.deb
              else
                echo "libtinfo5 unavailable; proceeding."
              fi
            fi
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK (cmdline-tools + platform & build-tools)
        uses: android-actions/setup-android@v3
        with:
          # Install commandline tools + platform-tools + platform 28 + build-tools 28.0.1
          packages: 'cmdline-tools;latest,platform-tools,platforms;android-28,build-tools;28.0.1'
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true

      - name: Verify installed build-tools and aidl
        run: |
          set -e
          echo "ANDROID_SDK_ROOT = $ANDROID_SDK_ROOT"
          ls -la "$ANDROID_SDK_ROOT" || true
          ls -la "$ANDROID_SDK_ROOT/build-tools" || true
          if [ -x "$ANDROID_SDK_ROOT/build-tools/28.0.1/aidl" ]; then
            echo "aidl present: $ANDROID_SDK_ROOT/build-tools/28.0.1/aidl"
            "$ANDROID_SDK_ROOT/build-tools/28.0.1/aidl" --help >/dev/null 2>&1 || true
          else
            echo "aidl not found at $ANDROID_SDK_ROOT/build-tools/28.0.1/aidl"
            ls -la "$ANDROID_SDK_ROOT/build-tools" || true
            exit 1
          fi

      - name: Link SDK into Buildozer expected location
        run: |
          mkdir -p ~/.buildozer/android/platform
          ln -sfn $HOME/.android/sdk ~/.buildozer/android/platform/android-sdk
          echo "Linked $HOME/.android/sdk -> ~/.buildozer/android/platform/android-sdk"

      - name: Build APK
        uses: digreatbrian/buildozer-action@v2
        with:
          python-version: 3.8
          buildozer-cmd: buildozer -v android debug
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: ./bin/*.apk
