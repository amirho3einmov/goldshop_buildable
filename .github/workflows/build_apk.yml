name: Build APK (robust)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup Java (OpenJDK 17)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install system packages (ncurses, build tools etc.)
      run: |
        sudo apt-get update -y
        sudo apt-get install -y git python3-pip python3-dev build-essential unzip zip \
          libncurses-dev libtinfo-dev libssl-dev libffi-dev liblzma-dev libbz2-dev zlib1g-dev \
          autoconf automake libtool pkg-config curl ca-certificates

    - name: Install Android SDK commandline tools & packages (aidl / build-tools / ndk)
      id: install_sdk
      run: |
        set -e
        export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
        export PATH="$ANDROID_SDK_ROOT/platform-tools:$PATH"
        mkdir -p "$ANDROID_SDK_ROOT"

        # Find or install sdkmanager (command-line tools)
        if command -v sdkmanager >/dev/null 2>&1; then
          SDKMANAGER_CMD="$(command -v sdkmanager)"
        else
          # download command-line tools (latest official)
          TMP_ZIP="/tmp/cmdline-tools.zip"
          echo "Downloading Android commandline tools..."
          curl -fsSL -o "$TMP_ZIP" "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          unzip -q "$TMP_ZIP" -d /tmp/cmdline-tools-unpack
          mv /tmp/cmdline-tools-unpack/cmdline-tools/* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
          rm -rf "$TMP_ZIP" /tmp/cmdline-tools-unpack
          SDKMANAGER_CMD="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
        fi

        chmod +x "$SDKMANAGER_CMD"
        echo "Using sdkmanager: $SDKMANAGER_CMD"

        # Install platform-tools, platform (API 33), build-tools and NDK r25.*
        # (Change versions if your app needs different API level)
        yes | "$SDKMANAGER_CMD" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" \
          "platforms;android-33" "build-tools;33.0.2" "cmdline-tools;latest" \
          "ndk;25.2.9519653" || true

        export PATH="$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
        # Accept licenses
        yes | "$SDKMANAGER_CMD" --sdk_root="$ANDROID_SDK_ROOT" --licenses || true

        # Sanity checks
        echo "aidl -> $(command -v aidl || echo 'not found')"
        echo "ndk -> $(ls -d $ANDROID_SDK_ROOT/ndk/* || true)"
        echo "build-tools -> $(ls -d $ANDROID_SDK_ROOT/build-tools/* || true)"

    - name: Install buildozer & python deps (system python)
      run: |
        # install buildozer and deps using system python to avoid venv --user issues
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install --upgrade Cython virtualenv
        python3 -m pip install --upgrade buildozer
        # ensure user-base bin is on PATH (in case pip used --user)
        export USER_BASE=$(python3 -m site --user-base)
        echo "USER_BASE=$USER_BASE"
        export PATH="$USER_BASE/bin:$PATH"
        which buildozer || python3 -m buildozer --version
        buildozer --version || true
        python3 -m pip list

    - name: Ensure buildozer.spec exists & patch recommended settings
      run: |
        if [ ! -f buildozer.spec ]; then
          echo "ERROR: buildozer.spec not found in repo root"
          ls -la
          exit 1
        fi
        # If not present, add recommended p4a branch + ndk line to improve CI compatibility
        if ! grep -q "^p4a.branch" buildozer.spec; then
          echo "p4a.branch = develop" >> buildozer.spec
        fi
        if ! grep -q "^android.ndk" buildozer.spec; then
          echo "android.ndk = 25b" >> buildozer.spec
        fi
        echo "buildozer.spec patched (if needed):"
        sed -n '1,200p' buildozer.spec

    - name: Prepare HOME and .buildozer directory
      run: |
        export HOME="${GITHUB_WORKSPACE}"
        mkdir -p "$HOME/.buildozer"
        mkdir -p "$HOME/.buildozer/android/platform"
        echo "HOME set to: $HOME"

    - name: Build APK (debug)
      env:
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        HOME: ${{ github.workspace }}
      run: |
        # ensure sdk tools and user-base bin are on PATH
        export PATH="/usr/local/lib/android/sdk/platform-tools:/usr/local/lib/android/sdk/cmdline-tools/latest/bin:$(python3 -m site --user-base)/bin:$PATH"
        echo "PATH: $PATH"
        # run buildozer using system python
        python3 -m buildozer -v android debug

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: apk
        path: bin/*.apk
